/*
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🔍 Introduction to Binary Search Tree (BST)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

A **Binary Search Tree (BST)** is a special type of Binary Tree that satisfies the following property:

    📌 BST Property:
        For every node:
        - All nodes in its LEFT subtree have values LESS than the node
        - All nodes in its RIGHT subtree have values GREATER than the node

        Left <= Node < Right ( = when duplicates are there )

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🌳 BASIC TERMINOLOGY:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

• 🔹 Node:
    A basic building block that stores a value and pointers to left and right children.

• 🔹 Root:
    The topmost node of the tree.

• 🔹 Parent and Child:
    If node A points to node B, then A is the parent, and B is the child.

• 🔹 Subtree:
    A smaller tree formed from any node and its descendants.

• 🔹 Leaf Node:
    A node with no children (both left and right are null).

• 🔹 Height of Tree:
    The number of edges in the longest path from the root to a leaf.

• 🔹 Depth of Node:
    The number of edges from the root to that node.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
💡 WHY USE A BST?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

A BST keeps data in **sorted order**, allowing for efficient searching, insertion, and deletion.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
⚙️ COMMON OPERATIONS & COMPLEXITY:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

| Operation   | Average Time | Worst Case (Skewed Tree) |
|-------------|--------------|---------------------------|
| Search      |   O(log N)   |        O(N)               |
| Insertion   |   O(log N)   |        O(N)               |
| Deletion    |   O(log N)   |        O(N)               |
| Inorder Traversal | O(N)   |        O(N)               |

(🔸 Balanced BSTs like AVL or Red-Black Trees keep time close to O(log N))

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📌 BST EXAMPLE:

              8
            /   \
           3     10
          / \      \
         1   6      14
            / \     /
           4   7   13

✅ BST Properties hold:
    - Left of 8 are < 8 → {1, 3, 4, 6, 7}
    - Right of 8 are > 8 → {10, 13, 14}
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
*/

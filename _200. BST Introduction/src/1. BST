/*
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📘 INTRODUCTION TO BINARY SEARCH TREE (BST)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

A BST is a **special type of Binary Tree** that maintains a specific ordering rule.

───────────────────────────────────────
🌳 DEFINITION:
───────────────────────────────────────
A **Binary Search Tree (BST)** is a binary tree where:
    🔸 For every node:
        → Left subtree contains only nodes with values **less than** the node.
        → Right subtree contains only nodes with values **greater than** the node.
    🔸 Both left and right subtrees must also be **Binary Search Trees**.

───────────────────────────────────────
📌 VISUAL EXAMPLE:

            8
           / \
          3   10
         / \    \
        1   6    14
           / \   /
          4   7 13

 Left <= Node < Right ( = when duplicates are there )

✔ BST VALIDATION:
→ For every node:
   - All nodes on the left < node
   - All nodes on the right > node

   ✅ BST Properties hold:
       - Left of 8 are < 8 → {1, 3, 4, 6, 7}
       - Right of 8 are > 8 → {10, 13, 14}

───────────────────────────────────────
✅ CHARACTERISTICS OF BST:
───────────────────────────────────────
1. 🔁 **Inorder Traversal** of BST gives elements in **sorted order** (ascending)
2. 🚀 Efficient operations:
   - Insertion
   - Deletion
   - Search

───────────────────────────────────────
📦 TIME COMPLEXITY:

| Operation     | Average Case | Worst Case (skewed tree) |
|---------------|--------------|---------------------------|
| Search        |   O(log N)   |          O(N)             |
| Insert/Delete |   O(log N)   |          O(N)             |

→ Worst case happens when tree becomes like a linked list (e.g., sorted input)

🧠 To avoid worst-case: Use **Balanced BSTs** like:
   - AVL Tree
   - Red-Black Tree

───────────────────────────────────────
🛠 USE CASES / APPLICATIONS:

1. 🔍 Fast lookup/search systems
2. 📦 Range queries
3. 🧮 Set and Map implementations (Java TreeSet, TreeMap)
4. 📚 Database indexing
5. 📊 Hierarchical sorting structures

───────────────────────────────────────
🧠 BST vs Binary Tree:

| Feature          | Binary Tree             | BST                             |
|------------------|--------------------------|----------------------------------|
| Structure        | Any                     | Ordered                         |
| Left/Right Rule  | No rule                 | Left < Root < Right             |
| Inorder Sorted   | Not always              | Always (ascending)              |
| Search Efficiency| Poor (O(N))             | Good (O(log N) average case)    |

───────────────────────────────────────
📌 MUST REMEMBER PROPERTIES:

🔹 Inorder traversal = Sorted order
🔹 No duplicate values (in most implementations)
🔹 Fast insert/search/delete when tree is balanced
🔹 Left subtree < Node < Right subtree
🔹 For recursion: Pass valid lower and upper bounds
🔹 Worst case: Skewed tree → O(N) time

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
*/


/*

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
⚙️ COMMON OPERATIONS & COMPLEXITY:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

| Operation   | Average Time | Worst Case (Skewed Tree) |
|-------------|--------------|---------------------------|
| Search      |   O(log N)   |        O(N)               |
| Insertion   |   O(log N)   |        O(N)               |
| Deletion    |   O(log N)   |        O(N)               |
| Inorder Traversal | O(N)   |        O(N)               |

(🔸 Balanced BSTs like AVL or Red-Black Trees keep time close to O(log N))

*/

public class Main {

    // üå≥ Binary Tree Node class
    static class Node {
        int val;
        Node left, right;

        Node(int val) {
            this.val = val;
        }
    }

    // ‚¨ÖÔ∏è Function to calculate depth of leftmost path from current node
    static int leftDepth(Node node) {
        int depth = 0;
        while (node != null) {
            depth++;              // Increase depth as we go down
            node = node.left;     // Move to the left child
        }
        return depth;             // Return how deep we went
    }

    // ‚û°Ô∏è Function to calculate depth of rightmost path from current node
    static int rightDepth(Node node) {
        int depth = 0;
        while (node != null) {
            depth++;              // Increase depth as we go down
            node = node.right;    // Move to the right child
        }
        return depth;             // Return how deep we went
    }

    // üîÅ Function to count nodes in complete binary tree
    static int countNodes(Node root) {
        if (root == null) return 0; // If tree is empty, return 0

        // üîç Get depth of leftmost and rightmost paths
        int left = leftDepth(root);
        int right = rightDepth(root);

        // ‚úÖ If both depths are same, it's a perfect binary tree
        if (left == right) {
            // Total nodes in a perfect tree = 2^depth - 1
            return (1 << left) - 1;  // Same as Math.pow(2, left) - 1
        }

        // ‚ö†Ô∏è If not perfect, count nodes recursively in left and right
        return 1 + countNodes(root.left) + countNodes(root.right);
        // 1 for current node + left subtree nodes + right subtree nodes
    }

    // üß™ MAIN FUNCTION TO RUN THE CODE
    public static void main(String[] args) {
        /*
                 1
               /   \
              2     3
             / \   /
            4   5 6
         */

        // üß± Create tree nodes
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
        root.left.right = new Node(5);
        root.right.left = new Node(6);

        // üéØ Count total nodes and print
        System.out.println("Total Nodes: " + countNodes(root)); // Output: 6
    }
}

/*
üß† DRY RUN: Count Total Nodes in a Complete Binary Tree

Tree structure:
           1
         /   \
        2     3
       / \   /
      4   5 6

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚è±Ô∏è Step 1: At Node(1)
‚Üí leftHeight(1) = 3 [path: 1 ‚Üí 2 ‚Üí 4]
‚Üí rightHeight(1) = 2 [path: 1 ‚Üí 3 ‚Üí 6]
‚Üí lh ‚â† rh ‚áí Not a perfect tree ‚áí Recur on left and right

countNodes(1) = 1 + countNodes(2) + countNodes(3)

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚è±Ô∏è Step 2: At Node(2)
‚Üí leftHeight(2) = 2 [2 ‚Üí 4]
‚Üí rightHeight(2) = 2 [2 ‚Üí 5]
‚Üí lh == rh ‚áí Subtree rooted at 2 is perfect
‚Üí Total nodes = 2^2 - 1 = 3 ‚úÖ
Return 3

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚è±Ô∏è Step 3: At Node(3)
‚Üí leftHeight(3) = 2 [3 ‚Üí 6]
‚Üí rightHeight(3) = 1 [3 ‚Üí null]
‚Üí lh ‚â† rh ‚áí Not perfect ‚áí Recur

countNodes(3) = 1 + countNodes(6) + countNodes(null)

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚è±Ô∏è Step 4: At Node(6)
‚Üí leftHeight(6) = 1
‚Üí rightHeight(6) = 1
‚Üí lh == rh ‚áí Perfect subtree ‚áí 2^1 - 1 = 1 ‚úÖ
Return 1

‚è±Ô∏è Step 5: countNodes(null) = 0

‚Üí countNodes(3) = 1 + 1 + 0 = 2

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚úÖ Final Calculation:
countNodes(1) = 1 + 3 + 2 = 6

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìà Time Complexity:
‚Üí O(log¬≤ N)
Why? For each node we compute left and right height (O(log N)), and we do this up to log N times in a balanced tree.

üì¶ Space Complexity:
‚Üí O(log N) recursion stack (height of tree)
*/


/*
Tree structure:
           1
         /   \
        2     3
       / \   /
      4   5 6

üîé Why is leftHeight(1) = 3 and rightHeight(1) = 2?

We calculate height by going as far as possible:
- leftHeight ‚Üí keep going left
- rightHeight ‚Üí keep going right

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üîç leftHeight(1):
1 ‚Üí 2 ‚Üí 4 ‚Üí null
‚úÖ So, height = 3

üîç rightHeight(1):
1 ‚Üí 3 ‚Üí 6 ‚Üí null
‚úÖ So, height = 2

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
ü§î Why different?

Because the tree is a **Complete Binary Tree**, not a **Perfect** one.

A **Perfect Binary Tree** has all levels fully filled ‚Äî leftHeight == rightHeight.

But in a **Complete Binary Tree**, the last level may not be full,
and all nodes are filled from **left to right**.

In our case:
- Left subtree is fully filled
- Right subtree is missing a node (right child of node 3)

So, leftHeight ‚â† rightHeight ‚áí we use recursive formula to count nodes:
‚Üí totalNodes = 1 + count(root.left) + count(root.right)

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚úÖ That's why:
leftHeight(1) = 3
rightHeight(1) = 2
‚Üí So we go recursive instead of using formula for perfect tree.
*/
